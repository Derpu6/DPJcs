{
  "id": "d0b75c9e-e531-41cf-aeee-9076c01a8a48",
  "question": "外部中断该怎么使用",
  "answer": "外部中断的使用需要完成以下步骤：\n\n1. **打开总中断允许开关 EA**：`EA = 1;`  \n2. **打开对应外部中断源的允许开关**：  \n   - 外部中断 0：`EX0 = 1;`  \n   - 外部中断 1：`EX1 = 1;`  \n3. **设置中断触发方式**：  \n   - `IT0 = 1;` 表示外部中断 0 为跳沿触发（下降沿）  \n   - `IT0 = 0;` 表示为电平触发  \n   - 同理，`IT1` 控制中断 1 的触发方式  \n4. **编写中断服务函数**：  \n   - 外部中断 0 的服务函数：`void int_ex0() interrupt 0`  \n   - 外部中断 1 的服务函数：`void int_ex1() interrupt 2`  \n\n例如，以下是一个中断初始化函数和中断服务函数的代码示例：\n\n```c\nvoid init_sys() // 系统初始化函数\n{\n    EA = 1;   // 打开总中断允许开关\n    EX0 = 1;  // 打开外部中断 0 开关\n    IT0 = 1;  // 跳沿触发方式\n    EX1 = 1;  // 打开外部中断 1 开关\n    IT1 = 1;  // 跳沿触发方式\n}\n\nvoid int_ex0() interrupt 0 // 外部中断 0 函数\n{\n    if(mode_flag == 1) // 如果是自动模式\n    {\n        if(motor_flag == 1)\n        {\n            motor_flag = 2;\n        }\n        else if(motor_flag == 2)\n        {\n            motor_flag = 1;\n            count++; // 运行次数加一\n        }\n    }\n}\n```\n\n---\n\n**扩展说明（与上下文无关）**：\n\n你可以把中断想象成一个正在做饭的人突然接到电话。虽然他正在切菜（主程序运行），但电话一响（中断触发），他就会暂停手头的工作，去接电话（执行中断服务程序），然后再回来继续切菜（回到主程序继续执行）。\n\n中断就像是单片机的“多任务处理”机制，它让单片机可以对外部事件做出快速响应，比如按键按下、传感器信号到来等。这样系统就更聪明、更实时了。",
  "timestamp": "2025-09-02T16:29:50.550439"
}